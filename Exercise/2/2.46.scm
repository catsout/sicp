(define (accumulate op init seqs)
  (if (null? seqs)
      init
      (op (car seqs) (accumulate op init (cdr seqs)))))
(define (make-vert x y)
  (list x y))
(define (xcor-vert v)
  (car v))
(define (ycor-vert v)
  (cadr v))
(define (add-vert . verts)
  (define (add-vert-two v1 v2)
    (make-vert (+ (xcor-vert v1) (xcor-vert v2)) (+ (ycor-vert v1) (ycor-vert v2))))
  (accumulate add-vert-two (list 0 0) verts))
(define (sub-vert . verts)
  (define (sub-vert-two v1 v2)
    (make-vert (- (xcor-vert v1) (xcor-vert v2)) (- (ycor-vert v1) (ycor-vert v2))))
  (accumulate sub-vert-two (list 0 0) verts))
(define (scale-vert s vert)
  (make-vert (* s (xcor-vert vert)) (* s (ycor-vert vert))))

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (caddr frame))
(define (frame-coord-map frame)
  (lambda (v)
    (add-vert
      (origin-frame frame)
      (scale-vert (xcor-vert v) (edge1-frame frame))
      (scale-vert (ycor-vert v) (edge2-frame frame)))))

(define (make-segment start-v end-v)
  (list start-v end-v))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cadr segment))

