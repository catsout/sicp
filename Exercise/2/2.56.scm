#!/bin/scheme --script

(define (variable? x) (symbol? x))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (=number? x num) (and (number? x) (= x num)))
(define (make-sum a1 a2) 
  (cond ((=number? a2 0) a1)
        ((=number? a1 0) a2)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product a1 a2) 
  (cond ((or (=number? a1 0) (=number? a2 0)) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else (list '* a1 a2))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (multipliter p) (cadr p))
(define (multiplicand p) (caddr p))
(define (make-exponentiation exp expon)
  (cond ((or (=number? exp 1) (=number? expon 0)) 1)
        ((=number? exp 0) 0)
        ((=number? expon 1) exp)
        (else (list '** exp expon))))
(define (exponentiation? exp) (and (pair? exp) (eq? (car exp) '**)))
(define (base-exponentiation exp) (cadr exp))
(define (exp-exponentiation exp) (caddr exp))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multipliter exp) (deriv (multiplicand exp) var))
           (make-product (deriv (multipliter exp) var) (multiplicand exp))))
        ((exponentiation? exp)
         (make-product (exp-exponentiation exp)
                       (make-product (make-exponentiation (base-exponentiation exp) (- (exp-exponentiation exp) 1))
                                     (deriv (base-exponentiation exp) var))))
        (else (error "unknow exp"))))

(display (deriv '(+ x 2) 'x))
(newline)
(display (deriv '(+ (* x y) (* (+ y 3) x)) 'x))
(newline)
(display (deriv '(** (* x y) 2) 'x))

  
