#!/bin/scheme --script

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (element-of-set? x set)
  (cond ((null? set) #f)
		((= x (entry set)) #t)
		((< x (entry set)) (element-of-set? x (left-branch tree)))
		((> x (entry set)) (element-of-set? x (right-branch tree)))))
(define (tree->list-1 tree)
  (if (null? tree)
	'()
	(append (tree->list-1 (left-branch tree))
			(cons (entry tree) (tree->list-2 (right-branch tree))))))
(define (tree->list-2 tree)
  (define (copy-to-list tree set)
	(if (null? tree)
	  set
	  (copy-to-list (left-branch tree)
					(cons (entry tree) (copy-to-list (right-branch tree) set)))))
  (copy-to-list tree '()))
(define mytree (make-tree 100 
						  (make-tree 2
									 (make-tree 1 '() '())
									 (make-tree 3 '() '())) 
						  (make-tree 110
									 (make-tree 101 '() '())
									 (make-tree 111 '() '()))))
(define (list->tree set)
  (car (partial-tree set (length set))))
(define (partial-tree set n)
  (if (= n 0)
	(cons '() set)
	(let ((left-size (quotient (- n 1) 2)))
	  (let ((left-re (partial-tree set left-size))
			(right-size (- n (+ left-size 1))))
		(let ((left-tree (car left-re))
			  (this-entry (cadr left-re))
			  (right-re (partial-tree (cddr left-re) right-size)))
		  (let ((right-tree (car right-re))
				(remain-set (cdr right-re)))
			(cons (make-tree this-entry left-tree right-tree) remain-set)))))))
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else (let ((x1 (car set1))
                    (x2 (car set2)))
                (cond ((= x1 x2) (cons x1 (union-set (cdr set1) (cdr set2))))
                      ((> x1 x2) (cons x2 (union-set set1 (cdr set2))))
                      (else (cons x1 (union-set (cdr set1) set2))))))))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
		(else (let ((x1 (car set1))
					(x2 (car set2)))
				(cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
					  ((> x1 x2) (intersection-set set1 (cdr set2)))
					  ((< x1 x2) (intersection-set (cdr set1) set2)))))))
(define (union-tree tree1 tree2)
  (list->tree (union-set (tree->list-1 tree1) 
						 (tree->list-1 tree2))))
(define (intersection-tree tree1 tree2)
  (list->tree (intersection-set (tree->list-1 tree1) 
								(tree->list-1 tree2))))

(define myset (list 1 3 7 8 19 20 41 44 56 66 73 82 89 99 102))
(define myset2 (list 2 4 9 19 44 502 2344))
(display (union-tree (list->tree myset) (list->tree myset2)))
(newline)
(display (intersection-tree (list->tree myset) (list->tree myset2)))

